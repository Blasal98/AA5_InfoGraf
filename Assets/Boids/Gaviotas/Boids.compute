// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct GameObjInf {

    float3 Position;

    float3 Velocity;
    float Speed;

    float3 Separation;
    float3 Alignment;
    float3 Cohesion;
};

RWStructuredBuffer<GameObjInf> BoidsResult;

int boidCount;

float dist = 0;
int neighboursCount = 0;
float3 averageSeparation = float3(0, 0, 0);
float3 averagePosition = float3(0, 0, 0);

//los threadgroups seran de 1 dimension con 128 threads disponibles
[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int i = 0; i < boidCount; i++) {

        dist = distance(BoidsResult[id.x].Position, BoidsResult[i].Position);
        if (dist < 20) {
            neighboursCount++;
            averageSeparation = averageSeparation + BoidsResult[id.x].Position - BoidsResult[i].Position;
            averagePosition = averagePosition + BoidsResult[i].Position;
        }
    }

    averageSeparation = averageSeparation / neighboursCount;
    normalize(averageSeparation);

    averagePosition = averagePosition / neighboursCount;
    averagePosition = averagePosition - BoidsResult[id.x].Position;
    normalize(averagePosition);

    BoidsResult[id.x].Separation = averageSeparation;
    //BoidsResult[id.x].Separation = float3(0, 0, 0);

    BoidsResult[id.x].Alignment = float3(0, 0, 0);
    //BoidsResult[id.x].Alignment = float3(0, 0, 0);

    BoidsResult[id.x].Cohesion = averagePosition;
    //BoidsResult[id.x].Cohesion = float3(0, 0, 0);
    
}
